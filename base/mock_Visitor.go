// Code generated by mockery v2.39.1. DO NOT EDIT.

package base

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockVisitor is an autogenerated mock type for the Visitor type
type MockVisitor struct {
	mock.Mock
}

type MockVisitor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVisitor) EXPECT() *MockVisitor_Expecter {
	return &MockVisitor_Expecter{mock: &_m.Mock}
}

// EnterExpressionElement provides a mock function with given fields: ctx, element
func (_m *MockVisitor) EnterExpressionElement(ctx context.Context, element VisitableElement) error {
	ret := _m.Called(ctx, element)

	if len(ret) == 0 {
		panic("no return value specified for EnterExpressionElement")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, VisitableElement) error); ok {
		r0 = rf(ctx, element)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVisitor_EnterExpressionElement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnterExpressionElement'
type MockVisitor_EnterExpressionElement_Call struct {
	*mock.Call
}

// EnterExpressionElement is a helper method to define mock.On call
//   - ctx context.Context
//   - element VisitableElement
func (_e *MockVisitor_Expecter) EnterExpressionElement(ctx interface{}, element interface{}) *MockVisitor_EnterExpressionElement_Call {
	return &MockVisitor_EnterExpressionElement_Call{Call: _e.mock.On("EnterExpressionElement", ctx, element)}
}

func (_c *MockVisitor_EnterExpressionElement_Call) Run(run func(ctx context.Context, element VisitableElement)) *MockVisitor_EnterExpressionElement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(VisitableElement))
	})
	return _c
}

func (_c *MockVisitor_EnterExpressionElement_Call) Return(_a0 error) *MockVisitor_EnterExpressionElement_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVisitor_EnterExpressionElement_Call) RunAndReturn(run func(context.Context, VisitableElement) error) *MockVisitor_EnterExpressionElement_Call {
	_c.Call.Return(run)
	return _c
}

// LeaveExpressionElement provides a mock function with given fields: ctx, element
func (_m *MockVisitor) LeaveExpressionElement(ctx context.Context, element VisitableElement) {
	_m.Called(ctx, element)
}

// MockVisitor_LeaveExpressionElement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LeaveExpressionElement'
type MockVisitor_LeaveExpressionElement_Call struct {
	*mock.Call
}

// LeaveExpressionElement is a helper method to define mock.On call
//   - ctx context.Context
//   - element VisitableElement
func (_e *MockVisitor_Expecter) LeaveExpressionElement(ctx interface{}, element interface{}) *MockVisitor_LeaveExpressionElement_Call {
	return &MockVisitor_LeaveExpressionElement_Call{Call: _e.mock.On("LeaveExpressionElement", ctx, element)}
}

func (_c *MockVisitor_LeaveExpressionElement_Call) Run(run func(ctx context.Context, element VisitableElement)) *MockVisitor_LeaveExpressionElement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(VisitableElement))
	})
	return _c
}

func (_c *MockVisitor_LeaveExpressionElement_Call) Return() *MockVisitor_LeaveExpressionElement_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVisitor_LeaveExpressionElement_Call) RunAndReturn(run func(context.Context, VisitableElement)) *MockVisitor_LeaveExpressionElement_Call {
	_c.Call.Return(run)
	return _c
}

// Literal provides a mock function with given fields: ctx, l
func (_m *MockVisitor) Literal(ctx context.Context, l interface{}) error {
	ret := _m.Called(ctx, l)

	if len(ret) == 0 {
		panic("no return value specified for Literal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVisitor_Literal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Literal'
type MockVisitor_Literal_Call struct {
	*mock.Call
}

// Literal is a helper method to define mock.On call
//   - ctx context.Context
//   - l interface{}
func (_e *MockVisitor_Expecter) Literal(ctx interface{}, l interface{}) *MockVisitor_Literal_Call {
	return &MockVisitor_Literal_Call{Call: _e.mock.On("Literal", ctx, l)}
}

func (_c *MockVisitor_Literal_Call) Run(run func(ctx context.Context, l interface{})) *MockVisitor_Literal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockVisitor_Literal_Call) Return(_a0 error) *MockVisitor_Literal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVisitor_Literal_Call) RunAndReturn(run func(context.Context, interface{}) error) *MockVisitor_Literal_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVisitor creates a new instance of MockVisitor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVisitor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVisitor {
	mock := &MockVisitor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
