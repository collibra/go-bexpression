// Code generated by mockery v2.53.4. DO NOT EDIT.

package base

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockComparison is an autogenerated mock type for the Comparison type
type MockComparison struct {
	mock.Mock
}

type MockComparison_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComparison) EXPECT() *MockComparison_Expecter {
	return &MockComparison_Expecter{mock: &_m.Mock}
}

// Accept provides a mock function with given fields: ctx, visitor
func (_m *MockComparison) Accept(ctx context.Context, visitor Visitor) error {
	ret := _m.Called(ctx, visitor)

	if len(ret) == 0 {
		panic("no return value specified for Accept")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Visitor) error); ok {
		r0 = rf(ctx, visitor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockComparison_Accept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accept'
type MockComparison_Accept_Call struct {
	*mock.Call
}

// Accept is a helper method to define mock.On call
//   - ctx context.Context
//   - visitor Visitor
func (_e *MockComparison_Expecter) Accept(ctx interface{}, visitor interface{}) *MockComparison_Accept_Call {
	return &MockComparison_Accept_Call{Call: _e.mock.On("Accept", ctx, visitor)}
}

func (_c *MockComparison_Accept_Call) Run(run func(ctx context.Context, visitor Visitor)) *MockComparison_Accept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Visitor))
	})
	return _c
}

func (_c *MockComparison_Accept_Call) Return(_a0 error) *MockComparison_Accept_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComparison_Accept_Call) RunAndReturn(run func(context.Context, Visitor) error) *MockComparison_Accept_Call {
	_c.Call.Return(run)
	return _c
}

// ToGql provides a mock function with no fields
func (_m *MockComparison) ToGql() (BinaryExpressionUnion, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToGql")
	}

	var r0 BinaryExpressionUnion
	var r1 error
	if rf, ok := ret.Get(0).(func() (BinaryExpressionUnion, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() BinaryExpressionUnion); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(BinaryExpressionUnion)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockComparison_ToGql_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToGql'
type MockComparison_ToGql_Call struct {
	*mock.Call
}

// ToGql is a helper method to define mock.On call
func (_e *MockComparison_Expecter) ToGql() *MockComparison_ToGql_Call {
	return &MockComparison_ToGql_Call{Call: _e.mock.On("ToGql")}
}

func (_c *MockComparison_ToGql_Call) Run(run func()) *MockComparison_ToGql_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComparison_ToGql_Call) Return(_a0 BinaryExpressionUnion, _a1 error) *MockComparison_ToGql_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockComparison_ToGql_Call) RunAndReturn(run func() (BinaryExpressionUnion, error)) *MockComparison_ToGql_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: ctx
func (_m *MockComparison) Validate(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockComparison_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockComparison_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockComparison_Expecter) Validate(ctx interface{}) *MockComparison_Validate_Call {
	return &MockComparison_Validate_Call{Call: _e.mock.On("Validate", ctx)}
}

func (_c *MockComparison_Validate_Call) Run(run func(ctx context.Context)) *MockComparison_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockComparison_Validate_Call) Return(_a0 error) *MockComparison_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComparison_Validate_Call) RunAndReturn(run func(context.Context) error) *MockComparison_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockComparison creates a new instance of MockComparison. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComparison(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComparison {
	mock := &MockComparison{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
